import Head from 'next/head';
import { useRouter } from 'next/router';

import { useState, useEffect } from 'react';

import Header from '../components/HeaderOther';
import Footer from '../components/Footer';

import { getStays, getStaysByTags, getStaysByLocations, getTags } from '../utilities/services';

function SearchResult() {
    const router = useRouter();

    const [ stays, setStays ] = useState();
    const [ loading, setLoading ] = useState();
    const [ searchTag, setSearchTag ] = useState();
    const [ searchLocation, setSearchLocation ] = useState();
    const [ searchGuest, setSearchGuest ] = useState();

    // get locations based on search query
    useEffect(async () => {
        if (searchTag) {
            getStaysByTags(searchTag.id).then(content => {
                setStays(content);
                setLoading(false);
            }); 
        }
        else if (searchLocation && searchGuest) {
            getStaysByLocations(searchLocation).then(content => {
                let totalGuest = searchGuest.adults + searchGuest.children;
                setStays(content.filter(item => item.rooms.guest >= totalGuest));
                setLoading(false);
            }); 
        }
        else if (searchLocation && !searchGuest) {
            getStaysByLocations(searchLocation).then(content => {
                setStays(content);
                setLoading(false);
            }); 
        }
        else {
            getStays().then(content => {
                setStays(content);
                setLoading(false);
            }); 
        }
    }, [searchTag, searchLocation, searchGuest]);

    // parse search query from url
    useEffect(() => {
        setLoading(true);

        if (router.query.location) {
            if (Object.entries(router.query).length === 4) {
                let guest = router.query.guest.split('-');
                let guestText = `${parseInt(guest[0]) + parseInt(guest[1])} guest${parseInt(guest[0]) + parseInt(guest[1]) <= 1 ? '' : 's'}`;

                if (parseInt(guest[2]) > 0)
                    guestText += `, ${parseInt(guest[2])} infant${parseInt(guest[2]) === 1 ? '' : 's'}`;

                if (parseInt(guest[0]) + parseInt(guest[1]) + parseInt(guest[2]) === 0)
                    guestText = '';

                setSearchGuest({ total: guestText, adults: parseInt(guest[0]), children: parseInt(guest[1]), infants: parseInt(guest[2]) });
            }

            setSearchLocation(router.query.location.replace('-', ', '));
        }
        else if (router.query.tag) {
            getTags().then(content => {
                setSearchTag(content.find(item => item.text.toLowerCase() === router.query.tag.replace('-', ' ').toLowerCase()));
            });
        }
        else {
            setSearchTag(undefined);
            setSearchLocation(undefined);
            setSearchGuest(undefined);
        }
    }, [router.query]);

    return (
        <div>
            <Head>
                <title>Airbnb Clone | Search</title>
                <meta name='description' content='Generated by create next app' />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <Header />

            <div style={{ height: '100vh', backgroundColor: 'var(--white)' }}></div>

            <Footer />
        </div>
    );
}

export default SearchResult;
